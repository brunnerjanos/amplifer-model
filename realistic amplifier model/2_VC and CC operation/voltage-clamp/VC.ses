{load_file("nrngui.hoc")}
objectvar save_window_, rvp_
objectvar scene_vector_[5]
objectvar ocbox_, ocbox_list_, scene_, scene_list_
{ocbox_list_ = new List()  scene_list_ = new List()}
{pwman_place(0,0,0)}

//Begin LinearCircuit[0]
{
load_file("lincir.hoc", "LinearCircuit")
}
{
ocbox_ = new LinearCircuit(1)
}
{object_push(ocbox_)}
{version(2)}
{mkelm(6, -120, 0, 1, 0)}
{mkelm(7, 10, 30, 2, 0)}
1e+009
0
{mklabel(0, "A_feedback", 23.1588, -26.2071)}
{mklabel(1, "Vp", -5.1554, -8.9079)}
{mklabel(2, "Vcmd", -17.6035, 1.5303)}
{mkelm(4, 890, 9.99993, 2, 3.14159)}
{mklabel(0, "V_comm", 49.0339, 5.6049)}
{sel.extra_info.restore()}
3
5 0
15 -5
10 0
{mkelm(6, 910, -10, 2, 0)}
{mkelm(0, 50, 70, 4, 1.5708)}
{mkelm(1, 10, 110, 2, 0)}
500
{mklabel(0, "Rf", -0.6653, -12.3071)}
{mkelm(0, 40, 110, 1, 0)}
{mkelm(0, -20, 110, 1, 0)}
{mkelm(0, -30, 80, 3, 1.5708)}
{mkelm(2, -60, 170, 2, 0)}
0.001615
{mklabel(0, "Cinj", 0.4336, 22.57)}
{mkelm(0, 140, 105, 6.5, -1.5708)}
{mkelm(7, 180, 40, 2, 3.14159)}
1
0
{mklabel(0, "A_CC", 14.723, 53.1063)}
{mklabel(3, "xx", 15, 15)}
{mkelm(0, 240, 59.9999, 2, -3.14159)}
{mkelm(7, 330, 20, 2, 3.14159)}
1e-009
0
{mklabel(0, "A_slow", 8.944, -50.2702)}
{mkelm(6, 370, 60, 2, 3.14159)}
{mkelm(0, 405, 4.44089e-016, 3.5, -1.26883e-017)}
{mkelm(0, 460, 0, 2, 0)}
{mkelm(2, 480, -30, 3, -1.5708)}
0.001
{mklabel(0, "Cp_slow", -1.804, -65.833)}
{mkelm(6, 480, -80, 2, 0)}
{mkelm(1, 500, 0, 2, 0)}
1e-009
{mklabel(0, "R_slow", 3.165, 20.7934)}
{mkelm(0, 545, 4.44089e-016, 2.5, -1.77636e-017)}
{mkelm(1, 445, -310, 2.5, -2.29614e-007)}
0.00542
{mklabel(0, "Rf_I_1a", -4.34, -16.833)}
{mklabel(1, "V_Imon_boosted", 15, 15)}
{mklabel(2, "N2", 15, 15)}
{mkelm(1, 490, -310, 2, 0)}
0.188
{mklabel(0, "Rf_I_1b", -5.262, -10.747)}
{mkelm(2, 470, -290, 2, 1.5708)}
0.11
{mklabel(0, "Cf_I_1a", 23.879, 4.128)}
{mkelm(0, 470, -255, 1.5, 1.5708)}
{mkelm(2, 510, -330, 2, 1.5708)}
0.011
{mklabel(0, "Cf_I_1b", 22.028, 3.548)}
{mkelm(0, 530, -310, 2, 0)}
{mkelm(7, 590, -290, 2, 0)}
1
0
{mklabel(0, "Af_I_1", -4.811, 1.158)}
{mkelm(0, 550, -240, 8, 0)}
{mkelm(0, 630, -265, 2.5, -1.5708)}
{mkelm(0, 670, -225, 1.5, 1.5708)}
{mkelm(1, 650, -290, 2, 0)}
0.00858
{mklabel(0, "Rf_I_2a", 0.358, -12.252)}
{mkelm(1, 690, -290, 2, 0)}
0.114
{mklabel(0, "Rf_I_2b", 2.988, -14.702)}
{mklabel(2, "", 15, 15)}
{mkelm(2, 670, -265, 2.5, -1.5708)}
0.1
{mklabel(0, "Cf_I_2a", 20.338, 0.318)}
{mkelm(2, 710, -315, 2.5, -1.5708)}
0.01
{mklabel(0, "Cf_I_2b", 21.498, -0.152)}
{mkelm(6, 510, -370, 2, 0)}
{mkelm(6, 710, -360, 2, 0)}
{mkelm(0, 765, -210, 9.5, 0)}
{mkelm(0, 745, -290, 3.5, 0)}
{mkelm(7, 820, -270, 2, 0)}
1
0
{mklabel(0, "Af_I_2", -1.861, 1.717)}
{mklabel(3, "V_Imon_boosted_filtered", 15, 15)}
{mkelm(0, 860, -240, 3, -1.5708)}
{mkelm(7, 160, -300, 2, 0)}
2
0
{mklabel(0, "Aconvert", -9.424, 53.353)}
{mklabel(3, "V_Imon", 15, 15)}
{mkelm(0, 105, -320, 1.5, 0)}
{mkelm(0, 560, 135, 2.5, -1.5708)}
{mkelm(1, 500, 160, 2, 0)}
1e-009
{mklabel(0, "R_fast", -2.482, -14.616)}
{mkelm(0, 540, 160, 2, 0)}
{mkelm(0, 460, 160, 2, 0)}
{mkelm(2, 480, 180, 2, 1.5708)}
0.00135
{mklabel(0, "C_fast", -24.567, 23.625)}
{mkelm(6, 480, 220, 2, 3.14159)}
{mkelm(0, 405, 160, 3.5, 0)}
{mkelm(7, 330, 140, 2, 3.14159)}
1e-009
0
{mklabel(0, "A_fast", 16.089, 48.22)}
{mkelm(6, 370, 100, 2, 0)}
{mkelm(0, 275, 140, 1.5, 0)}
{mkelm(0, 260, 100, 4, -1.5708)}
{mkelm(0, 200, -440, 14, -1.5708)}
{mkelm(0, -15, -100, 1.5, 0)}
{mkelm(0, -30.0001, -45, 5.5, 1.57079)}
{mkelm(0, 50, 170, 9, 0)}
{mkelm(0, -30.0002, -190, 9, -1.5708)}
{mkelm(0, 70, 30, 2, 0)}
{mkelm(0, 90, -145, 17.5, 1.5708)}
{mkelm(0, -55, 50, 2.5, 0)}
{mkelm(0, -80.0001, 110, 6, 1.5708)}
{mkelm(7, 600, 110, 2, 3.14159)}
10
0
{mklabel(0, "A_V_comm_10x_fast", 9.399, 4.52)}
{mkelm(0, 715, 130, 7.5, 0)}
{mkelm(0, 790, 75, 5.5, -1.5708)}
{mkelm(6, 640, 70, 2, 0)}
{mkelm(0, 790, -60, 5, -1.5708)}
{mkelm(0, 420, -105, 37.0034, -0.0135127)}
{mkelm(7, 260, -560, 2, 0)}
1e+009
0
{mklabel(0, "A1_boost", -7.22, 3.967)}
{mkelm(0, 210, -580, 1, 0)}
{mkelm(0, 220, -510, 3, -1.5708)}
{mkelm(1, 220, -455, 2.5, 1.5708)}
0.031857
{mklabel(0, "R2_boost", -41.295, 1.261)}
{mkelm(2, 220, -410, 2, 1.5708)}
0.1
{mklabel(0, "C1_boost", -40.12, 3.293)}
{mkelm(1, 240, -480, 2, 0)}
1.5156
{mklabel(0, "R1_boost", 16.307, 16.855)}
{mkelm(0, 280, -480, 2, 0)}
{mkelm(1, 300, -500, 2, -1.5708)}
0.20648
{mklabel(0, "R3_boost", 37.437, -1.947)}
{mkelm(0, 300, -540, 2, 1.5708)}
{mkelm(7, 360, -470, 1, 0)}
1
0
{mklabel(0, "A_buffer_boost_1", 59.742, -9.607)}
{mkelm(6, 320, -460, 2, -1.5708)}
{mkelm(0, 380, -450, 2, 1.5708)}
{mkelm(1, 380, -415, 1.5, -1.5708)}
0.25532
{mklabel(0, "R4_boost_a", 45.621, 1.238)}
{mkelm(1, 380, -380, 2, 1.5708)}
0.20084
{mklabel(0, "R4_boost_b", 44.445, 6.215)}
{mkelm(6, 380, -340, 2, 3.14159)}
{mkelm(7, 330, -410, 1, 3.14159)}
1
0
{mklabel(0, "A_buffer_boost_2", -47.826, 19.754)}
{mkelm(6, 350, -430, 1, 0)}
{mkelm(0, 305, -410, 0.5, 0)}
{mkelm(0, 300, -465, 1.5, 1.5708)}
{mkelm(2, 300, -430, 2, 1.5708)}
0.12
{mklabel(0, "C2_boost", -30.759, -8.454)}
{mkelm(0, 365, -400, 1.5, 0)}
{mkelm(0, 320, -480, 2, 0)}
{mkelm(0, 420, -435, 12.5, 1.5708)}
{mkelm(6, 550, -290, 2, 0)}
{mkelm(6, 760, -250, 2, -1.5708)}
{mkelm(2, 10, 140, 2, 0)}
0.0003826
{mklabel(0, "Cstray", -0.67836, 21.478)}
{mkelm(0, 30, 125, 1.5, -1.5708)}
{mkelm(0, -10, 125, 1.5, 1.5708)}
{mkelm(7, 830, -10, 2, 3.14159)}
1
0.01
{mklabel(0, "A_V_comm", 14.511, 3.37067)}
{mkelm(6, 870, -50, 2, 0)}
{mkelm(0, 360, -560, 6, 0)}
{mkelm(2, 2.41444e-015, -115, 1.5, 1.5708)}
0.001
{mklabel(0, "C_commandfilt", 39.9631, -1.096)}
{mkelm(1, 25, -100, 2.5, 0)}
0.95
{mklabel(0, "R_commandfilt", 29.3367, 20.8653)}
{mkelm(6, 0, -150, 2, 0)}
{mkelm(0, 255, 20, 3.5, 0)}
{mkelm(0, 45, -280, 7.5, 0)}
{mkelm(6, 220, -370, 2, 3.14159)}
{mkelm(7, 610, 0, 2, 3.14159)}
10
0
{mklabel(0, "A_V_comm_10x_slow", 30.671, 3.08347)}
{mkelm(0, 720, 20, 7, 0)}
{mkelm(0, 790, 5, 1.5, -1.5708)}
{mkelm(6, 650, -40, 2, 0)}
{mkelm(0, -100, 50, 2, 0)}
{mkelm(1, -180, 50, 2, 0)}
1e-006
{mklabel(0, "R_cell", -3.769, -8.9079)}
{mklabel(2, "Vcell", 3.898, -10.4889)}
{mkelm(6, -200, 30, 2, 0)}
{mkelm(2, -160, 70, 2, -1.5708)}
0
{mklabel(0, "C_cell", 19.233, 1.1312)}
{mkelm(6, -160, 120, 3, 3.14159)}
{mkelm(1, -140, 50, 2, 0)}
1e+006
{mklabel(0, "R_access", 17.099, -9.6983)}
{mkelm(2, -120, 30, 2, 1.5708)}
0
{mklabel(0, "C_pip", 23.1118, 0.7642)}
{parasitic_ = 0  noconsist_ = 1}
{graphlist.append(new LincirGraph(this, 1))}
2
Vcmd (mV)
4 3 0.8 0.9 2
Vcell (mV)
3 3 0.8 0.9 2
0 25 -10 1 // graph size
300 480 514.8 404.1 // box size
// end info
{g.exec_menu("Simulate")  tool(2)}
{sel = nil}
{object_pop()}
{
{
save_window_=ocbox_.g
save_window_.size(0,300,0,200)
scene_vector_[2] = save_window_
ocbox_.g = save_window_
save_window_.save_name("ocbox_.g")
save_window_.label(33.1588, 3.7929, "A_feedback", 1, 1, 0.5, 0.5, 1)
save_window_.label(-35.1554, 41.0921, "Vp", 1, 1, 0.5, 0.5, 1)
save_window_.label(-47.6035, 11.5303, "Vcmd", 1, 1, 0.5, 0.5, 1)
save_window_.label(939.034, 15.6048, "V_comm", 1, 1, 0.5, 0.5, 1)
save_window_.label(9.3347, 97.6929, "Rf", 1, 1, 0.5, 0.5, 1)
save_window_.label(-59.5664, 192.57, "Cinj", 1, 1, 0.5, 0.5, 1)
save_window_.label(194.723, 93.1063, "A_CC", 1, 1, 0.5, 0.5, 1)
save_window_.label(155, 55.0001, "xx", 1, 1, 0.5, 0.5, 1)
save_window_.label(338.944, -30.2702, "A_slow", 1, 1, 0.5, 0.5, 1)
save_window_.label(478.196, -95.833, "Cp_slow", 1, 1, 0.5, 0.5, 1)
save_window_.label(503.165, 20.7934, "R_slow", 1, 1, 0.5, 0.5, 1)
save_window_.label(440.66, -326.833, "Rf_I_1a", 1, 1, 0.5, 0.5, 1)
save_window_.label(435, -295, "V_Imon_boosted", 1, 1, 0.5, 0.5, 1)
save_window_.label(485, -295, "N2", 1, 1, 0.5, 0.5, 1)
save_window_.label(484.738, -320.747, "Rf_I_1b", 1, 1, 0.5, 0.5, 1)
save_window_.label(493.879, -285.872, "Cf_I_1a", 1, 1, 0.5, 0.5, 1)
save_window_.label(532.028, -326.452, "Cf_I_1b", 1, 1, 0.5, 0.5, 1)
save_window_.label(585.189, -288.842, "Af_I_1", 1, 1, 0.5, 0.5, 1)
save_window_.label(650.358, -302.252, "Rf_I_2a", 1, 1, 0.5, 0.5, 1)
save_window_.label(692.988, -304.702, "Rf_I_2b", 1, 1, 0.5, 0.5, 1)
save_window_.label(725, -275, "", 1, 1, 0.5, 0.5, 1)
save_window_.label(690.338, -264.682, "Cf_I_2a", 1, 1, 0.5, 0.5, 1)
save_window_.label(731.498, -315.152, "Cf_I_2b", 1, 1, 0.5, 0.5, 1)
save_window_.label(818.139, -268.283, "Af_I_2", 1, 1, 0.5, 0.5, 1)
save_window_.label(875, -255, "V_Imon_boosted_filtered", 1, 1, 0.5, 0.5, 1)
save_window_.label(150.576, -246.647, "Aconvert", 1, 1, 0.5, 0.5, 1)
save_window_.label(215, -285, "V_Imon", 1, 1, 0.5, 0.5, 1)
save_window_.label(497.518, 145.384, "R_fast", 1, 1, 0.5, 0.5, 1)
save_window_.label(455.433, 203.625, "C_fast", 1, 1, 0.5, 0.5, 1)
save_window_.label(346.089, 188.22, "A_fast", 1, 1, 0.5, 0.5, 1)
save_window_.label(609.399, 114.52, "A_V_comm_10x_fast", 1, 1, 0.5, 0.5, 1)
save_window_.label(252.78, -556.033, "A1_boost", 1, 1, 0.5, 0.5, 1)
save_window_.label(178.705, -453.739, "R2_boost", 1, 1, 0.5, 0.5, 1)
save_window_.label(179.88, -406.707, "C1_boost", 1, 1, 0.5, 0.5, 1)
save_window_.label(256.307, -463.145, "R1_boost", 1, 1, 0.5, 0.5, 1)
save_window_.label(337.437, -501.947, "R3_boost", 1, 1, 0.5, 0.5, 1)
save_window_.label(419.742, -479.607, "A_buffer_boost_1", 1, 1, 0.5, 0.5, 1)
save_window_.label(425.621, -413.762, "R4_boost_a", 1, 1, 0.5, 0.5, 1)
save_window_.label(424.445, -373.785, "R4_boost_b", 1, 1, 0.5, 0.5, 1)
save_window_.label(282.174, -390.246, "A_buffer_boost_2", 1, 1, 0.5, 0.5, 1)
save_window_.label(269.241, -438.454, "C2_boost", 1, 1, 0.5, 0.5, 1)
save_window_.label(9.32164, 161.478, "Cstray", 1, 1, 0.5, 0.5, 1)
save_window_.label(844.511, -6.62933, "A_V_comm", 1, 1, 0.5, 0.5, 1)
save_window_.label(39.9631, -116.096, "C_commandfilt", 1, 1, 0.5, 0.5, 1)
save_window_.label(54.3367, -79.1347, "R_commandfilt", 1, 1, 0.5, 0.5, 1)
save_window_.label(640.671, 3.08347, "A_V_comm_10x_slow", 1, 1, 0.5, 0.5, 1)
save_window_.label(-183.769, 41.0921, "R_cell", 1, 1, 0.5, 0.5, 1)
save_window_.label(-156.102, 39.5111, "Vcell", 1, 1, 0.5, 0.5, 1)
save_window_.label(-140.767, 71.1312, "C_cell", 1, 1, 0.5, 0.5, 1)
save_window_.label(-122.901, 40.3017, "R_access", 1, 1, 0.5, 0.5, 1)
save_window_.label(-96.8882, 30.7642, "C_pip", 1, 1, 0.5, 0.5, 1)
}
ocbox_.map("LinearCircuit[0]", 1290, 10, 220, 300)
}
objref ocbox_
//End LinearCircuit[0]

{
xpanel("RunControl", 0)
v_init = 0
xvalue("Init","v_init", 1,"stdinit()", 1, 1 )
xbutton("Init & Run","run()")
xbutton("Stop","stoprun=1")
runStopAt = 5
xvalue("Continue til","runStopAt", 1,"{continuerun(runStopAt) stoprun=1}", 1, 1 )
runStopIn = 1
xvalue("Continue for","runStopIn", 1,"{continuerun(t + runStopIn) stoprun=1}", 1, 1 )
xbutton("Single Step","steprun()")
t = 10
xvalue("t","t", 2 )
tstop = 25
xvalue("Tstop","tstop", 1,"tstop_changed()", 0, 1 )
dt = 1e-005
xvalue("dt","dt", 1,"setdt()", 0, 1 )
steps_per_ms = 250
xvalue("Points plotted/ms","steps_per_ms", 1,"setdt()", 0, 1 )
screen_update_invl = 0.05
xvalue("Scrn update invl","screen_update_invl", 1,"", 0, 1 )
realtime = 3.22
xvalue("Real Time","realtime", 0,"", 0, 1 )
xpanel(1000,10)
}
objectvar scene_vector_[1]
{doNotify()}
