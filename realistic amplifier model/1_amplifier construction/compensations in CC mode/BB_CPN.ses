{load_file("nrngui.hoc")}
objectvar save_window_, rvp_
objectvar scene_vector_[5]
objectvar ocbox_, ocbox_list_, scene_, scene_list_
{ocbox_list_ = new List()  scene_list_ = new List()}
{pwman_place(0,0,0)}

//Begin LinearCircuit[0]
{
load_file("lincir.hoc", "LinearCircuit")
}
{
ocbox_ = new LinearCircuit(1)
}
{object_push(ocbox_)}
{version(2)}
{mkelm(7, 160, 100, 1, 1.5708)}
1
0
{mklabel(0, "A1", 0.55, -3.086)}
{mklabel(3, "V_A1o", 24.355, 2.95)}
{restore_ic(3, -80)}
{mkelm(4, 160, -125, 2.5, -1.5708)}
{mklabel(0, "Vcmd", 30.425, 2.066)}
{sel.extra_info.restore()}
10
4.16719 0
5 0
3 -100
0 0
0 0
0 0
0 0
0 0
0 0
0 0
{mkelm(0, 150, 10, 7, 1.5708)}
{mkelm(1, 160, 155, 1.5, 1.5708)}
500
{mklabel(0, "Rf", -12.66, 1.655)}
{mkelm(0, 160, 180, 1, -1.5708)}
{mkelm(0, 160, 130, 1, 1.5708)}
{mkelm(0, 215, 190, 5.5, 3.14159)}
{mkelm(7, 280, 120, 1, -1.5708)}
1
0
{mklabel(0, "A2", 3.2122, 6.424)}
{mklabel(3, "V_A2o", 27.1697, 1.318)}
{restore_ic(3, -80)}
{mkelm(0, 280, 70, 3, -1.5708)}
{mkelm(0, 225, 40, 5.5, 3.14159)}
{mkelm(0, 270, 165, 2.5, 1.5708)}
{mkelm(6, 140, -150, 2, -1.5708)}
{mkelm(0, 190, 120, 3, 0)}
{mkelm(0, 220, -25, 14.5, 1.5708)}
{mkelm(0, 280, -75, 11.5, 1.5708)}
{mkelm(7, 160, -180, 1, 3.14159)}
1
0
{mklabel(0, "A_diff_for_Imon", 11.166, 2.881)}
{mklabel(3, "V_Imon", -16.725, 10.956)}
{restore_ic(3, -80)}
{mkelm(2, 180, 155, 1.5, 1.5708)}
0.0003826
{mklabel(0, "C_stray", 29.425, 3.133)}
{mkelm(0, 170, 170, 1, 0)}
{mkelm(0, 170, 140, 1, -1.08793e-007)}
{mkelm(0, 345, 40, 6.5, 0)}
{mkelm(7, 400, 100, 1, 1.5708)}
6.19195e-010
0
{mklabel(0, "Acpn", -0.094, 0.912)}
{mkelm(2, 400, 180, 1, -1.5708)}
0.001615
{mklabel(0, "Ccpn", 26.969, -0.867)}
{mkelm(0, 335, 190, 6.5, 0)}
{mkelm(0, 160, 205, 1.5, -1.5708)}
{mkelm(0, 10, 190, 2, 0)}
{mkelm(7, -30, 180, 1, 3.14159)}
1
0
{mklabel(0, "A_V_out", 31.6923, 3.29)}
{mkelm(0, -50, -70, 25, 1.5708)}
{mkelm(7, -200, -330, 1, 3.14159)}
1
0
{mklabel(0, "Af_V_1", 3.714, 1.785)}
{mkelm(0, -60, -320, 1, 0)}
{mkelm(1, -85, -320, 1.5, 0)}
0.00542
{mklabel(0, "Rf_V_1a", 0.5545, -9.79)}
{mkelm(1, -120, -320, 2, 0)}
0.188
{mklabel(0, "Rf_V_1b", -1.463, -9.79)}
{mkelm(0, -100, -290, 3, -1.5708)}
{mkelm(2, -160, -260, 2, 0)}
0.11
{mklabel(0, "Cf_V_1a", -1.631, 18.423)}
{mkelm(0, -120, -260, 2, 0)}
{mkelm(0, -200, -260, 2, 0)}
{mkelm(2, -140, -345, 2.5, 1.5708)}
0.011
{mklabel(0, "Cf_V_1b", 25.625, -0.542)}
{mkelm(6, -140, -390, 2, 0)}
{mkelm(0, -160, -320, 2, 0)}
{mkelm(0, -200, -370, 2, 0)}
{mkelm(0, -180, -355, 1.5, 1.5708)}
{mkelm(0, -220, -350, 2, -1.5708)}
{mkelm(0, -220, -295, 3.5, 1.5708)}
{mkelm(0, -240, -330, 2, 0)}
{mkelm(1, -280, -330, 2, 0)}
0.00858
{mklabel(0, "Rf_V_2a", 0.07, -8.654)}
{mkelm(1, -320, -330, 2, 0)}
0.114
{mklabel(0, "Rf_V_2b", -1.673, -7.866)}
{mkelm(0, -360, -330, 2, 0)}
{mkelm(7, -400, -340, 1, 3.14159)}
1
0
{mklabel(0, "A_f_V_2", 2.44, 1.243)}
{mklabel(3, "V_out_filtered", -35.788, 5.05195)}
{restore_ic(3, -80)}
{mkelm(0, -300, -300, 3, -1.5708)}
{mkelm(0, -320, -270, 2, 0)}
{mkelm(2, -360, -270, 2, 0)}
0.1
{mklabel(0, "Cf_V_2a", -0.205, 19.521)}
{mkelm(0, -400, -270, 2, 0)}
{mkelm(0, -420, -305, 3.5, 1.5708)}
{mkelm(0, -420, -355, 1.5, 1.5708)}
{mkelm(0, -400, -370, 2, 0)}
{mkelm(0, -380, -360, 1, 1.5708)}
{mkelm(2, -340, -350, 2, 1.5708)}
0.01
{mklabel(0, "Cf_V_2b", 18.495, -0.468)}
{mkelm(6, -340, -390, 2, 0)}
{mkelm(0, 105, -180, 3.49999, -7.22725e-013)}
{mkelm(0, 70, -355, 17.5, 1.5708)}
{mkelm(0, 10, -530, 6, 0)}
{mkelm(1, -70, -530, 2, 0)}
0.00542
{mklabel(0, "Rf_I_1a", 1.5053, -7.581)}
{mkelm(1, -110, -530, 2, 0)}
0.188
{mklabel(0, "Rf_I_1b", -0.04, -8.013)}
{mkelm(0, -150, -530, 2, 0)}
{mkelm(7, -190, -540, 1, 3.14159)}
1
0
{mklabel(0, "Af_I_1", 2.928, 1.987)}
{mkelm(0, -210, -505, 3.5, -1.5708)}
{mkelm(0, -190, -470, 2, 0)}
{mkelm(2, -150, -470, 2, 0)}
0.11
{mklabel(0, "Cf_I_1a", -2.451, 17.241)}
{mkelm(0, -110, -470, 2, 0)}
{mkelm(0, -90, -500, 3, -1.5708)}
{mkelm(6, -130, -590, 2, 0)}
{mkelm(2, -130, -550, 2, -1.5708)}
0.011
{mklabel(0, "Cf_I_1b", 19.3415, -0.564)}
{mkelm(0, -190, -580, 2, 0)}
{mkelm(0, -170, -565, 1.5, 1.5708)}
{mkelm(0, -210, -560, 2, -1.5708)}
{mkelm(0, -230, -540, 2, 0)}
{mkelm(1, -270, -540, 2, 0)}
0.00858
{mklabel(0, "Rf_I_2a", -3.144, 11.568)}
{mkelm(1, -310, -540, 2, 0)}
0.114
{mklabel(0, "Rf_I_2b", 0.936, 11.135)}
{mkelm(0, -350, -540, 2, 0)}
{mkelm(7, -390, -550, 1, 3.14159)}
1
0
{mklabel(0, "Af_I_2", 4.018, 2.323)}
{mklabel(3, "_", -21.134, 0.208)}
{restore_ic(3, -80)}
{mkelm(0, -390, -590, 2, 0)}
{mkelm(0, -410, -570, 2, -1.5708)}
{mkelm(0, -370, -575, 1.5, 1.5708)}
{mkelm(0, -410, -515, 3.5, -1.5708)}
{mkelm(0, -390, -480, 2, 0)}
{mkelm(2, -350, -480, 2, 0)}
0.1
{mklabel(0, "Cf_I_2a", 1.235, 18.875)}
{mkelm(0, -310, -480, 2, 0)}
{mkelm(0, -290, -510, 3, -1.5708)}
{mkelm(2, -330, -565, 2.5, 1.5708)}
0.01
{mklabel(0, "Cf_I_2b", 21.184, -0.217)}
{mkelm(6, -330, -610, 2, 0)}
{mkelm(0, 230, -190, 5, 1.68655e-012)}
{mkelm(0, 200, -170, 2, 3.14159)}
{mkelm(6, -540, -580, 2, 0)}
{mkelm(1, -525, -560, 1.5, 0)}
500
{mklabel(0, "Ro_Imon", 1.649, 13.368)}
{mkelm(0, -440, -550, 3, 0)}
{mkelm(7, -490, -560, 1, 3.14159)}
1
0
{mklabel(0, "I_mon_filtered", 23.725, 3.681)}
{mkelm(6, -470, -590, 2, 0)}
{mkelm(0, 170, 60, 2, -1.5708)}
{mkelm(6, 290, 160, 2, 3.14159)}
{mkelm(0, 115, -60, 3.5, 0)}
{mkelm(7, 10, -50, 1, 3.14159)}
1e-009
0
{mklabel(0, "A_BB", 4.1634, -0.2045)}
{mklabel(3, "v_BB", 1.19843, -10.8038)}
{restore_ic(3, -80)}
{mkelm(1, 30, -50, 1, -1.5708)}
0.02
{mklabel(0, "R1_A_BB", 25.6769, 4.2119)}
{mkelm(1, 40, -60, 1, 0)}
10
{mklabel(0, "R2_A_BB", 12.1438, -8.7531)}
{mkelm(6, 30, -20, 2, 3.14159)}
{mkelm(0, -10, 60, 11, -1.5708)}
{mkelm(0, 65, -60, 1.5, 0)}
{mkelm(0, 160, 250, 3, -1.5708)}
{mkelm(0, 110, 280, 5, 0)}
{mkelm(1, 60, 320, 4, -1.5708)}
10
{mklabel(0, "R1", 30.3578, -0.434)}
{mkelm(2, 160, 305, 2.5, 1.5708)}
0.00065927
{mklabel(0, "Cslot1", 31.703, 5.54)}
{mkelm(6, 160, 350, 2, 3.14159)}
{mkelm(2, 270, 445, 2.5, -1.5708)}
0.00281
{mklabel(0, "C1", 23.402, 1.891)}
{mkelm(0, 215, 280, 5.5, 0)}
{mkelm(0, 270, 350, 7, 1.5708)}
{mkelm(0, 60, 395, 3.5, 1.5708)}
{mkelm(2, 60, 455, 2.5, 1.5708)}
7.4168e-005
{mklabel(0, "Cslot2", 35.5164, 3.779)}
{mkelm(6, 60, 500, 2, 3.14159)}
{mkelm(0, 100, 430, 4, 0)}
{mkelm(1, -5.54037e-015, 515, 3.5, -1.5708)}
500
{mklabel(0, "R2", 25.7436, -0.582)}
{mkelm(2, 140, 510, 4, 1.5708)}
0.0102204
{mklabel(0, "C2", 29.222, 3.524)}
{mkelm(0, 30, 550, 3, 0)}
{mkelm(0, 100, 550, 4, 0)}
{mkelm(0, 140, 450, 2, 1.5708)}
{mkelm(0, 30, 430, 3, 0)}
{mkelm(0, 1.18634e-015, 455, 2.5, -1.5708)}
{mkelm(0, 60, 595, 4.5, 1.5708)}
{mkelm(2, 60, 665, 2.5, 1.5708)}
6.192e-006
{mklabel(0, "Cslot3", 37.1613, 2.154)}
{mkelm(6, 60, 720, 3, 3.14159)}
{mkelm(0, 165, 640, 10.5, 0)}
{mkelm(2, 270, 665, 2.5, 1.5708)}
1.2793e-005
{mklabel(0, "Cslot4", 32.227, 0.854)}
{mkelm(6, 270, 710, 2, 3.14159)}
{mkelm(0, 270, 555, 8.5, -1.5708)}
{mkelm(0, 40, 280, 2, 0)}
{mkelm(0, 40, 360, 2, 0)}
{mkelm(2, 20, 320, 4, -1.5708)}
3e-005
{mklabel(0, "Cpar_R1", -49.3428, 3.605)}
{mkelm(2, -40, 515, 3.5, -1.5708)}
0.0001804
{mklabel(0, "Cpar_R2", -44.8706, 3.457)}
{mkelm(0, -20, 550, 2, 0)}
{mkelm(0, -20, 480, 2, 0)}
{mkelm(6, 300, 640, 3, 1.5708)}
{mkelm(2, 180, 265, 2.5, -0.643501)}
0.000886
{mklabel(0, "C_MC", 34.12, 3.101)}
{mkelm(6, 200, 230, 2, 0)}
{mkelm(7, 150, -80, 1, 1.5708)}
1
0.005
{mklabel(0, "A153", 15, 15)}
{mkelm(6, 140, -120, 2, 0)}
{mkelm(0, 410, 60, 2, 1.5708)}
{mkelm(2, 140, 220, 2, 0)}
0.0007634
{mklabel(0, "C_CC", -0.651, 25.431)}
{mkelm(6, 100, 220, 2, -1.5708)}
{mkelm(6, 390, 60, 2, 0)}
{mkelm(3, 400, 130, 1, -1.5708)}
18.3
{mklabel(0, "Lcpn", 33.146, 3.022)}
{mkelm(1, 400, 155, 1.5, -1.5708)}
1.48801
{mklabel(0, "Rcpn", 23.21, 4.398)}
{mkelm(0, 30, 115, 7.5, -1.5708)}
{mkelm(0, 100, 40, 7, 0)}
{parasitic_ = 0  noconsist_ = 0}
{graphlist.append(new LincirGraph(this, 1))}
1
I_mon_filtered I (nA)
3 3 0.8 0.9 2
8 14 -0.4 0.1 // graph size
300 480 500 300 // box size
// end info
{g.exec_menu("Simulate")  tool(2)}
{sel = nil}
{object_pop()}
{
{
save_window_=ocbox_.g
save_window_.size(0,300,0,200)
scene_vector_[2] = save_window_
ocbox_.g = save_window_
save_window_.save_name("ocbox_.g")
save_window_.label(160.55, 96.914, "A1", 1, 1, 0.5, 0.5, 1)
save_window_.label(184.355, 122.95, "V_A1o", 1, 1, 0.5, 0.5, 1)
save_window_.label(190.425, -122.934, "Vcmd", 1, 1, 0.5, 0.5, 1)
save_window_.label(147.34, 156.655, "Rf", 1, 1, 0.5, 0.5, 1)
save_window_.label(283.212, 126.424, "A2", 1, 1, 0.5, 0.5, 1)
save_window_.label(307.17, 101.318, "V_A2o", 1, 1, 0.5, 0.5, 1)
save_window_.label(171.166, -177.119, "A_diff_for_Imon", 1, 1, 0.5, 0.5, 1)
save_window_.label(123.275, -169.044, "V_Imon", 1, 1, 0.5, 0.5, 1)
save_window_.label(209.425, 158.133, "C_stray", 1, 1, 0.5, 0.5, 1)
save_window_.label(399.906, 100.912, "Acpn", 1, 1, 0.5, 0.5, 1)
save_window_.label(426.969, 179.133, "Ccpn", 1, 1, 0.5, 0.5, 1)
save_window_.label(1.6923, 183.29, "A_V_out", 1, 1, 0.5, 0.5, 1)
save_window_.label(-196.286, -328.215, "Af_V_1", 1, 1, 0.5, 0.5, 1)
save_window_.label(-84.4455, -329.79, "Rf_V_1a", 1, 1, 0.5, 0.5, 1)
save_window_.label(-121.463, -329.79, "Rf_V_1b", 1, 1, 0.5, 0.5, 1)
save_window_.label(-161.631, -241.577, "Cf_V_1a", 1, 1, 0.5, 0.5, 1)
save_window_.label(-114.375, -345.542, "Cf_V_1b", 1, 1, 0.5, 0.5, 1)
save_window_.label(-279.93, -338.654, "Rf_V_2a", 1, 1, 0.5, 0.5, 1)
save_window_.label(-321.673, -337.866, "Rf_V_2b", 1, 1, 0.5, 0.5, 1)
save_window_.label(-397.56, -338.757, "A_f_V_2", 1, 1, 0.5, 0.5, 1)
save_window_.label(-455.788, -334.948, "V_out_filtered", 1, 1, 0.5, 0.5, 1)
save_window_.label(-360.205, -250.479, "Cf_V_2a", 1, 1, 0.5, 0.5, 1)
save_window_.label(-321.505, -350.468, "Cf_V_2b", 1, 1, 0.5, 0.5, 1)
save_window_.label(-68.4947, -537.581, "Rf_I_1a", 1, 1, 0.5, 0.5, 1)
save_window_.label(-110.04, -538.013, "Rf_I_1b", 1, 1, 0.5, 0.5, 1)
save_window_.label(-187.072, -538.013, "Af_I_1", 1, 1, 0.5, 0.5, 1)
save_window_.label(-152.451, -452.759, "Cf_I_1a", 1, 1, 0.5, 0.5, 1)
save_window_.label(-110.659, -550.564, "Cf_I_1b", 1, 1, 0.5, 0.5, 1)
save_window_.label(-273.144, -528.432, "Rf_I_2a", 1, 1, 0.5, 0.5, 1)
save_window_.label(-309.064, -528.865, "Rf_I_2b", 1, 1, 0.5, 0.5, 1)
save_window_.label(-385.982, -547.677, "Af_I_2", 1, 1, 0.5, 0.5, 1)
save_window_.label(-431.134, -549.792, "_", 1, 1, 0.5, 0.5, 1)
save_window_.label(-348.765, -461.125, "Cf_I_2a", 1, 1, 0.5, 0.5, 1)
save_window_.label(-308.816, -565.217, "Cf_I_2b", 1, 1, 0.5, 0.5, 1)
save_window_.label(-523.351, -546.632, "Ro_Imon", 1, 1, 0.5, 0.5, 1)
save_window_.label(-466.275, -556.319, "I_mon_filtered", 1, 1, 0.5, 0.5, 1)
save_window_.label(14.1634, -50.2045, "A_BB", 1, 1, 0.5, 0.5, 1)
save_window_.label(-8.80157, -60.8037, "v_BB", 1, 1, 0.5, 0.5, 1)
save_window_.label(55.6769, -45.7881, "R1_A_BB", 1, 1, 0.5, 0.5, 1)
save_window_.label(52.1438, -68.7531, "R2_A_BB", 1, 1, 0.5, 0.5, 1)
save_window_.label(90.3578, 319.566, "R1", 1, 1, 0.5, 0.5, 1)
save_window_.label(191.703, 310.54, "Cslot1", 1, 1, 0.5, 0.5, 1)
save_window_.label(293.402, 446.891, "C1", 1, 1, 0.5, 0.5, 1)
save_window_.label(95.5164, 458.779, "Cslot2", 1, 1, 0.5, 0.5, 1)
save_window_.label(25.7436, 514.418, "R2", 1, 1, 0.5, 0.5, 1)
save_window_.label(169.222, 513.524, "C2", 1, 1, 0.5, 0.5, 1)
save_window_.label(97.1613, 667.154, "Cslot3", 1, 1, 0.5, 0.5, 1)
save_window_.label(302.227, 665.854, "Cslot4", 1, 1, 0.5, 0.5, 1)
save_window_.label(-29.3428, 323.605, "Cpar_R1", 1, 1, 0.5, 0.5, 1)
save_window_.label(-84.8706, 518.457, "Cpar_R2", 1, 1, 0.5, 0.5, 1)
save_window_.label(214.12, 268.101, "C_MC", 1, 1, 0.5, 0.5, 1)
save_window_.label(165, -65, "A153", 1, 1, 0.5, 0.5, 1)
save_window_.label(139.349, 245.431, "C_CC", 1, 1, 0.5, 0.5, 1)
save_window_.label(433.146, 133.022, "Lcpn", 1, 1, 0.5, 0.5, 1)
save_window_.label(423.21, 159.398, "Rcpn", 1, 1, 0.5, 0.5, 1)
}
ocbox_.map("LinearCircuit[0]", 1420, 10, 200, 300)
}
objref ocbox_
//End LinearCircuit[0]

{
xpanel("RunControl", 0)
v_init = -65
xvalue("Init","v_init", 1,"stdinit()", 1, 1 )
xbutton("Init & Run","run()")
xbutton("Stop","stoprun=1")
runStopAt = 5
xvalue("Continue til","runStopAt", 1,"{continuerun(runStopAt) stoprun=1}", 1, 1 )
runStopIn = 1
xvalue("Continue for","runStopIn", 1,"{continuerun(t + runStopIn) stoprun=1}", 1, 1 )
xbutton("Single Step","steprun()")
t = 15
xvalue("t","t", 2 )
tstop = 15
xvalue("Tstop","tstop", 1,"tstop_changed()", 0, 1 )
dt = 0.004
xvalue("dt","dt", 1,"setdt()", 0, 1 )
steps_per_ms = 250
xvalue("Points plotted/ms","steps_per_ms", 1,"setdt()", 0, 1 )
screen_update_invl = 0.05
xvalue("Scrn update invl","screen_update_invl", 1,"", 0, 1 )
realtime = 0.04
xvalue("Real Time","realtime", 0,"", 0, 1 )
xpanel(1420,480)
}
objectvar scene_vector_[1]
{doNotify()}
